; -----------------------------------------------------------------------------
; DECLARE ARGUMENTS
; -----------------------------------------------------------------------------

[variable_args]
; Waveform parameters that will vary in MCMC
mass1 =
mass2 =
spin1z =
spin2z =
#spin1_a =
#spin1_azimuthal =
#spin1_polar =
#spin2_a =
#spin2_azimuthal =
#spin2_polar =
t_shift =
ra =
dec =
#chirp_distance =
#distance = 
coa_phase =
inclination =
injection_snr =
polarization =


[static_args]
; Waveform parameters that will not change in MCMC
; IMRPhenomHM for higher-order modes (non-precessing), IMRPhenomPv2 for precessing (no higher order modes).
approximant = NRHybSur3dq8
domain = time
f_lower = 20
#f_ref = 20
distance = 100
waveform_length = 128

; Width of the background noise interval (in seconds) around the event_time,
; which is used to make the injection. Should be larger than (see below):
;   sample_length = seconds_before_event + seconds_after_event
; because we need to crop off the edges that are corrupted by the whitening.
noise_interval_width = 16

; original_sampling_rate = Sampling rate of raw HDF files (usually 4096 Hz)
; target_sampling_rate = Desired sampling rate for sample generation output
original_sampling_rate = 4096
target_sampling_rate = 2048

; Define parameters for the whitening procedure. See documentation of the
; pycbc.types.TimeSeries.whiten() method for an explanation of what these
; values exactly mean.
whitening_segment_duration = 4
whitening_max_filter_duration = 4

; Define the lower and upper bound for the bandpass filter (in Hertz)
bandpass_lower = 20
bandpass_upper = 2048
#bandpass_upper = 500

; Define how to align the sample around the event time. By convention, the
; event time is the H1 time!
; The sum of these values will be the the sample_length!
seconds_before_event = 0.80
seconds_after_event = 0.20

; alpha for the Tukey window that is used to "fade on" the waveforms
; It represents the fraction of the window inside the cosine tapered region.
; To turn off the "fade on", simply choose tukey_alpha = 0.
tukey_alpha = 0.25

#mass1 = 40.87
#mass2 = 13.91
#spin1z = 0.69
#spin2z = 0.80
#polarization = 4.98
#inclination = 0.29
#coa_phase = 4.93
#ra = 0.54847
#dec = 0.69843


; -----------------------------------------------------------------------------
; DEFINE DISTRIBUTIONS FOR PARAMETERS
; -----------------------------------------------------------------------------

[prior-mass1]
; Prior for mass1
name = uniform
#filename = params_49.hdf
min-mass1 = 27.6
max-mass1 = 27.8


[prior-mass2]
; Prior for mass2
name = uniform
#filename = params_49.hdf
min-mass2 = 8.0
max-mass2 = 10.0


[prior-spin1z]
; Prior for spin1z
name = uniform
min-spin1z = -0.998
max-spin1z = 0.998


[prior-spin2z]
; Prior for spin2z
name = uniform
min-spin2z = -0.998
max-spin2z = 0.998

#[prior-spin1_a]
#name = uniform
#min-spin1_a = 0.0
#max-spin1_a = 0.99

#[prior-spin1_polar+spin1_azimuthal]
#name = uniform_solidangle
#polar-angle = spin1_polar
#azimuthal-angle = spin1_azimuthal

#[prior-spin2_a]
#name = uniform
#min-spin2_a = 0.0
#max-spin2_a = 0.99

#[prior-spin2_polar+spin2_azimuthal]
#name = uniform_solidangle
#polar-angle = spin2_polar
#azimuthal-angle = spin2_azimuthal

[prior-t_shift]
name = uniform
min-t_shift = -0.1
max-t_shift = 0.1

#[prior-distance]
#; Prior for distance
#name = uniform
##filename = params_38.hdf
#min-distance = 4
#max-distance = 1000


[prior-injection_snr]
; Prior for the injection SNR
name = uniform
##filename = snr_49.hdf
min-injection_snr = 35
max-injection_snr = 40


[prior-coa_phase]
; Coalescence phase prior
name = uniform_angle


[prior-inclination]
#; Inclination prior
name = sin_angle

#[prior-ra+dec]
#; Sky position prior
#name = uniform_sky

[prior-ra]
;Prior for u (RA)
name =  uniform
min-ra = 0
max-ra = 1

[prior-dec]
;Prior for v (Dec)
name = uniform
min-dec = 0
max-dec = 1

#[prior-comoving_volume]
#name = uniform
#; ~1 Gpc -> 10 Gpc
#min-comoving_volume = 3e7
#max-comoving_volume = 3e11

#[prior-chirp_distance]
#; following gives a uniform volume prior
#name = uniform_radius
#min-chirp_distance = 130
#max-chirp_distance = 350

[prior-polarization]
; Polarization prior
name = uniform_angle

#[waveform_transforms-mchirp+q]
#name = mass1_mass2_to_mchirp_q

#[waveform_transforms-distance]
#name = chirp_distance_to_distance

#[waveform_transforms-redshift]
#name = custom
#inputs = comoving_volume
#redshift = redshift_from_comoving_volume(comoving_volume)

#[waveform_transforms-distance]
#name = custom
#inputs = comoving_volume
#distance = distance_from_comoving_volume(comoving_volume)

#[waveform_transforms-mass1]
#name = custom
#inputs = q, srcmtotal, redshift
#mass1 = mass1_from_mtotal_q(srcmtotal, q) * (1 + redshift)

#[waveform_transforms-mass2]
#name = custom
#inputs = q, srcmtotal, redshift
#mass2 = mass2_from_mtotal_q(srcmtotal, q) * (1 + redshift)
